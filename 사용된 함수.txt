prompt()
답을 할때까지 코드의 실행을 멈추고, 매우 오래된 방법임. 별로 안이쁨. css로 바꾸지도 못함. 숫자를 입력해도 string

parseInt()
string-->number로 변환해주는 함수

isNaN()
NaN(숫자가 아닌 것)의 유무를 boolean으로 반환 isNaN(age) -> false, isNaN(name) -> true

if(){}

lcoalStorage

xxx.classList.add remove

setInterval(함수명, 1000) 1초마다 실행

padStart(2, '0')
1초 -> 01초로 변경, 단 문자열이라 number타입에 쓰려면 string()으로 감싸던지 해야함

Math.random()
0부터 1사이 무작위의 값을 반환해줌
#6.0, #6.1처럼 Math.floor(내림)와 조합하여 배열에서 랜덤으로 뽑거나 할 때 유용

appendChild()<->prependChild(목록 처음에 노드 추가)
지정된 상위 노드의 하위노드 목록 마지막에 노드를 추가할 수 있음

#7.2 클릭한 버튼의 부모를 삭제하는 법 <li><button></button></li>
4분 5초-todo-list에서 어떤 버튼을 클릭한지 아는 법 중요
function handleTodoListButton(event) {
    console.dir(event.target.parentElement.innerText) //버튼의 부모의 텍스트가 출력되었다!
} 그러므로 아래처럼 클릭한 버튼의 부모를 삭제
function handleTodoListButton(event) {
    const li = event.target.parentElement
    li.remove()
}

JSON.stringify()
JSON으로 변환
JSON.parse()
JSON을 다시 오브젝트나 arry로 변환
ㅌ.forEach(a) ㅌ가 가지고 있는 각각의 item에 대해 a함수를 실행해 줘

=>
arrow function은 return을 함축적으로 가지고 있어서 보통 함수로 만들고 싶다면 중괄호를 추가하고 리턴을 하면 됨
x.map(toamto => {return `ㅋㅋ ${tomato}`})

{
	x.forEach()
	단순히 array 에 들어있는 모든 값을 iterate (순찰(?)) 할수 있는 function

	x.map()
	모든 베열의 아이템에 함수를 실행하는 메소드. 그리고 나서 함수의 결과값으로 새로운 배열을 만듦

	x.map()은 리턴값으로 나오기 때문에 x.map(toamto => consor.log(tomato))하면 리턴값이 없어서 undefined가 나옴
	 x.map(toamto => `ㅋㅋ ${tomato}`) 하면 배열마다 앞에 ㅋㅋ가 추가됨
}

Date.now()
랜덤한 아이디를 부여할 때 유용할듯

a.filter(b)  버튼을 누르면 배열에서 특정 부분만 삭제하는게 아닌 그 부분을 제외한 새로운 배열을 만든다
a배열에서 트루 값만 리턴한다
function sexyFilter(item){return item !== 3}
[1, 2, 3, 4, 5].filter(sexyFilter)
결과값: [1, 2, 4, 5]